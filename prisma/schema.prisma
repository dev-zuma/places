generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model AdminUser {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

model Player {
  id            String         @id @default(cuid())
  email         String         @unique
  username      String         @unique
  totalCases    Int            @default(0)
  totalPoints   Int            @default(0)
  createdAt     DateTime       @default(now())
  solvedCasesV2 PlayerCaseV2[]
}

model GameV2 {
  id                         String           @id @default(cuid())
  theme                      String
  phrase                     String
  category                   String
  difficulty                 String
  isPublished                Boolean          @default(false)
  publishedAt                DateTime?
  createdAt                  DateTime         @default(now())
  updatedAt                  DateTime         @updatedAt
  villainName                String
  villainTitle               String
  villainGender              String
  villainAge                 String
  villainEthnicity           String
  villainDistinctiveFeature  String
  villainClothingDescription String
  villainImageUrl            String?
  caseTitle                  String
  crimeSummary               String
  interestingFact            String
  finalLocationObjective     String
  finalLocationNarrative     String
  finalInterestingFact       String
  gameCompletionMessage      String
  villainRace                String?
  finalLocationV2            FinalLocationV2?
  gameplayTurns              GameplayTurn[]
  generationV2               GenerationV2?
  locationsV2                LocationV2[]
  playerCasesV2              PlayerCaseV2[]
}

model LocationV2 {
  id             String  @id @default(cuid())
  gameV2Id       String
  position       Int
  name           String
  country        String
  latitude       Float
  longitude      Float
  timezoneOffset Float
  timezoneName   String
  landmarks      String
  additionalData String?
  hasImage       Boolean @default(false)
  imageUrl       String?
  imageTurn      Int?
  imageLevel     String?
  villainElement String?
  gameV2         GameV2  @relation(fields: [gameV2Id], references: [id], onDelete: Cascade)

  @@unique([gameV2Id, position])
}

model FinalLocationV2 {
  id                String @id @default(cuid())
  gameV2Id          String @unique
  name              String
  country           String
  latitude          Float
  longitude         Float
  educationalPhrase String
  categoryHint      String
  interestingFact   String
  flagColors        String
  reason            String
  clueConnections   String
  gameV2            GameV2 @relation(fields: [gameV2Id], references: [id], onDelete: Cascade)
}

model GameplayTurn {
  id              String  @id @default(cuid())
  gameV2Id        String
  turn            Int
  narrative       String
  isFinalLocation Boolean @default(false)
  clues           Clue[]
  gameV2          GameV2  @relation(fields: [gameV2Id], references: [id], onDelete: Cascade)

  @@unique([gameV2Id, turn])
}

model Clue {
  id                String       @id @default(cuid())
  gameplayTurnId    String
  orderIndex        Int
  type              String
  content           String?
  description       String?
  data              String
  locationPositions String?
  gameplayTurn      GameplayTurn @relation(fields: [gameplayTurnId], references: [id], onDelete: Cascade)

  @@unique([gameplayTurnId, orderIndex])
}

model GenerationV2 {
  id                      String    @id @default(cuid())
  gameV2Id                String    @unique
  status                  String
  currentStep             String?
  totalSteps              Int       @default(20)
  completedSteps          Int       @default(0)
  error                   String?
  startedAt               DateTime  @default(now())
  completedAt             DateTime?
  phase1EndTime           DateTime?
  phase1StartTime         DateTime?
  phase2EndTime           DateTime?
  phase2StartTime         DateTime?
  phase3EndTime           DateTime?
  phase3StartTime         DateTime?
  phase4EndTime           DateTime?
  phase4StartTime         DateTime?
  locationImage1EndTime   DateTime?
  locationImage1StartTime DateTime?
  locationImage2EndTime   DateTime?
  locationImage2StartTime DateTime?
  locationImage3EndTime   DateTime?
  locationImage3StartTime DateTime?
  villainImageEndTime     DateTime?
  villainImageStartTime   DateTime?
  gameV2                  GameV2    @relation(fields: [gameV2Id], references: [id], onDelete: Cascade)
}

model PlayerCaseV2 {
  id              String    @id @default(cuid())
  playerId        String
  gameV2Id        String
  solvedLocations Boolean   @default(false)
  solvedFinal     Boolean   @default(false)
  solvedAt        DateTime?
  turnsUsed       Int?
  pointsEarned    Int?
  gameV2          GameV2    @relation(fields: [gameV2Id], references: [id])
  player          Player    @relation(fields: [playerId], references: [id])

  @@unique([playerId, gameV2Id])
}
