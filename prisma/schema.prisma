// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}


model AdminUser {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
}


// Player profiles
model Player {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String   @unique
  totalCases  Int      @default(0)
  totalPoints Int      @default(0)
  createdAt   DateTime @default(now())
  
  solvedCasesV2 PlayerCaseV2[]
}

// =============================================================================
// NEW V2 MODELS FOR 3+1 GAME FORMAT
// =============================================================================

model GameV2 {
  id                String    @id @default(cuid())
  
  // Basic game info
  theme             String    // e.g., "DIAMOND HEISTS"
  phrase            String    // e.g., "Brilliance in the shadows"
  category          String    // e.g., "Geography"
  difficulty        String    // "easy", "medium", "hard"
  
  // Publishing
  isPublished       Boolean   @default(false)
  publishedAt       DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Villain details
  villainName       String    // e.g., "Scarlett 'The Cutter' Vanderbilt"
  villainTitle      String    // e.g., "The Diamond District Ghost"
  villainGender     String    // "male" or "female"
  villainAge        String    // e.g., "early 40s"
  villainRace       String?   // e.g., "Black", "White", "Asian", "Hispanic/Latino"
  villainEthnicity  String    // e.g., "Nigerian", "Mexican", "Japanese"
  villainDistinctiveFeature String // e.g., "Always wears blood-red lipstick"
  villainClothingDescription String // Detailed outfit description
  villainImageUrl   String?   // S3 URL for villain portrait
  
  // Case details
  caseTitle         String    // e.g., "The Flawless Collection Conspiracy"
  crimeSummary      String    // Full crime story
  interestingFact   String    // Educational fact about the 3 locations
  
  // Final location details
  finalLocationObjective String // "WHERE_STASHED", "NEXT_TARGET", etc.
  finalLocationNarrative String // Narrative explaining what player needs to find
  
  // Game completion
  finalInterestingFact String  // "Aha moment" fact revealed after solving entire case
  gameCompletionMessage String // Congratulatory message tying everything together
  
  // Relations
  locationsV2       LocationV2[]
  finalLocationV2   FinalLocationV2?
  gameplayTurns     GameplayTurn[]
  generationV2      GenerationV2?
  playerCasesV2     PlayerCaseV2[]
}

model LocationV2 {
  id              String   @id @default(cuid())
  gameV2Id        String
  position        Int      // 1, 2, or 3
  
  // Geographic data
  name            String   // City or Country name
  country         String   // Country (same as name if country-level)
  latitude        Float
  longitude       Float
  timezoneOffset  Float    // Can be decimal (e.g., 5.5 for India)
  timezoneName    String   // e.g., "Asia/Kolkata"
  
  // Content
  landmarks       String   // JSON array of landmarks
  additionalData  String?  // JSON for extra location-specific data (olympic year, etc.)
  
  // Images (only 3 total images across all locations in a game)
  hasImage        Boolean  @default(false)
  imageUrl        String?  // S3 URL if this location has an image
  imageTurn       Int?     // Which turn this image is revealed (1-5)
  imageLevel      String?  // "obscured", "medium", "clear"
  villainElement  String?  // How villain is integrated: "security_footage", "belongings", etc.
  
  gameV2          GameV2   @relation(fields: [gameV2Id], references: [id], onDelete: Cascade)
  
  @@unique([gameV2Id, position])
}

model FinalLocationV2 {
  id              String   @id @default(cuid())
  gameV2Id        String   @unique
  
  // Location data
  name            String   // City or Country name
  country         String
  latitude        Float
  longitude       Float
  
  // Context
  reason          String   // Why this location (narrative explanation)
  clueConnections String   // JSON array of how it connects to the 3 locations
  
  gameV2          GameV2   @relation(fields: [gameV2Id], references: [id], onDelete: Cascade)
}

model GameplayTurn {
  id              String   @id @default(cuid())
  gameV2Id        String
  turn            Int      // 1-7 (5 for locations, 2 for final)
  
  // Content
  narrative       String   // Turn introduction narrative
  isFinalLocation Boolean  @default(false) // true for turns 6-7
  
  // Relations
  gameV2          GameV2   @relation(fields: [gameV2Id], references: [id], onDelete: Cascade)
  clues           Clue[]
  
  @@unique([gameV2Id, turn])
}

model Clue {
  id              String        @id @default(cuid())
  gameplayTurnId  String
  orderIndex      Int           // Order within the turn
  
  // Clue details
  type            String        // See clue types in spec
  content         String?       // Main clue content
  description     String?       // Additional context
  data            String        // JSON for type-specific data
  locationPositions String?     // JSON array of location positions this clue applies to (e.g., "[1, 3]")
  
  gameplayTurn    GameplayTurn  @relation(fields: [gameplayTurnId], references: [id], onDelete: Cascade)
  
  @@unique([gameplayTurnId, orderIndex])
}

model GenerationV2 {
  id              String    @id @default(cuid())
  gameV2Id        String    @unique
  status          String    // "pending", "generating", "completed", "failed"
  currentStep     String?   // Current generation step
  totalSteps      Int       @default(20) // More steps for turn-by-turn generation
  completedSteps  Int       @default(0)
  error           String?
  startedAt       DateTime  @default(now())
  completedAt     DateTime?
  
  // Performance timing for each phase
  phase1StartTime DateTime?
  phase1EndTime   DateTime?
  phase2StartTime DateTime?
  phase2EndTime   DateTime?
  phase3StartTime DateTime?
  phase3EndTime   DateTime?
  phase4StartTime DateTime?
  phase4EndTime   DateTime?
  
  // Individual image generation phases
  villainImageStartTime DateTime?
  villainImageEndTime   DateTime?
  locationImage1StartTime DateTime?
  locationImage1EndTime   DateTime?
  locationImage2StartTime DateTime?
  locationImage2EndTime   DateTime?
  locationImage3StartTime DateTime?
  locationImage3EndTime   DateTime?
  
  gameV2          GameV2    @relation(fields: [gameV2Id], references: [id], onDelete: Cascade)
}

model PlayerCaseV2 {
  id                String    @id @default(cuid())
  playerId          String
  gameV2Id          String
  
  // Progress tracking
  solvedLocations   Boolean   @default(false) // Solved first 3
  solvedFinal       Boolean   @default(false) // Solved 4th location
  solvedAt          DateTime?
  turnsUsed         Int?      // Total turns to complete
  pointsEarned      Int?      // Points for this case
  
  player            Player    @relation(fields: [playerId], references: [id])
  gameV2            GameV2    @relation(fields: [gameV2Id], references: [id])
  
  @@unique([playerId, gameV2Id])
}